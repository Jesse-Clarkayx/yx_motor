# AUTOGENERATED! DO NOT EDIT! File to edit: 06_workflows.ipynb (unless otherwise specified).

__all__ = ['Workflows']

# Cell
from typing import List
import requests

from .api import API


class Workflows:
    "Class for workflow-related API actions"

    def __init__(self, api: API):
        self.api = api
        self.base_endpoint = "workflows/"

    def build_schedule_payload(self, schedule_name: str, asset_id: str):
        return {"schedule": {"name": schedule_name, "assetId": asset_id,}}

    def get_questions(self, asset_id: str):
        """Return question payload for an asset of type analytic app."""
        response = self.api.post(url=f"workflows/{asset_id}/questions")
        return response

    def get_vfs_inputs(self, asset_id: str):
        """Return the list of vfs inputs for a given workflow asset."""
        response = self.api.get(url=f"workflows/{asset_id}/vfsInputs")
        return response

    def update_vfs_inputs(self, asset_id: str, tool_id: str):
        pass

    def get_workflow_dependencies(self, asset_id: str):
        """Return the list of asset dependencies for a given workflow asset"""
        response = self.api.get(url=f"workflows/{asset_id}/dependencies")
        return response

    def update_workflow_dependencies(self, asset_id: str):
        pass

    def add_workflow_dependency(self, asset_id: str):
        pass

    def add_workflow_dependency_connection(self, asset_id: str, tool_id: str):
        pass

    def run_workflow(
        self, asset_id: str, schedule_name: str, vfs_inputs: List[str] = None
    ):
        """Schedule a workflow to be executed instantaneously.
           Returns a schedule object."""
        response = self.api.post(
            url="workflows/run",
            json=self.build_schedule_payload(schedule_name, asset_id),
        )
        return response